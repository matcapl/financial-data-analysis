# scripts/generate_schema.py
#!/usr/bin/env python3
"""
Generate schema/001_financial_schema.sql and seed SQL for line_item_definitions
from config/fields.yaml.
"""

import yaml
from pathlib import Path

CONFIG_PATH = Path(__file__).parent.parent / 'config' / 'fields.yaml'
SCHEMA_PATH = Path(__file__).parent.parent / 'schema' / '001_financial_schema.sql'

def generate_schema():
    cfg = yaml.safe_load(CONFIG_PATH.read_text())
    fields = cfg.get('fields', {})
    line_items = cfg.get('line_items', [])

    # Build CREATE TABLE financial_metrics
    cols = []
    for name, info in fields.items():
        sql_type = info['sql_type']
        cols.append(f"  {name} {sql_type}")
    pk = "  PRIMARY KEY (company_id, line_item, period_label)"
    create_tbl = ["-- Auto-generated by generate_schema.py", "CREATE TABLE financial_metrics ("]
    create_tbl.extend(cols)
    create_tbl.append(pk)
    create_tbl.append(");\n")

    # Build INSERT seed for line_item_definitions
    seed = ["-- Seed line_item_definitions", "INSERT INTO line_item_definitions (id, name, aliases, description) VALUES"]
    vals = []
    for item in line_items:
        iid = item['id']
        name = item['name'].replace("'", "''")
        aliases = item.get('aliases', [])
        # Format aliases as Postgres array literal
        arr = "{" + ",".join(a.replace('"', '\\"') for a in aliases) + "}"
        desc = item['description'].replace("'", "''")
        vals.append(f"  ({iid}, '{name}', '{arr}'::TEXT[], '{desc}')")
    seed.append(",\n".join(vals) + "\nON CONFLICT (id) DO NOTHING;\n")

    # Write to schema file
    with SCHEMA_PATH.open('w') as f:
        f.write("\n".join(create_tbl + seed))

    print(f"Generated {SCHEMA_PATH}")

if __name__ == '__main__':
    generate_schema()
