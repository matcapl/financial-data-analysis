import yaml
import os

TABLES_YAML = "config/tables.yaml"
OUTPUT_FILE = "schema/001_financial_schema.sql"

def load_tables_config(path=TABLES_YAML):
    with open(path, 'r') as f:
        cfg = yaml.safe_load(f)
    return cfg['tables']

def sql_type(col):
    t = col['type']
    if t.lower() == 'serial':
        return f"{col['name']} SERIAL"
    else:
        return f"{col['name']} {t}" + (" DEFAULT {}".format(col.get('default')) if col.get('default') else "")

def column_constraints(col):
    return ' '.join(col.get('constraints', []))

def render_columns(cols):
    lines = []
    for col in cols:
        parts = [sql_type(col)]
        if col.get('constraints'):
            parts.append(column_constraints(col))
        lines.append('    ' + ' '.join(parts))
    return ',\n'.join(lines)

def render_primary_key(cols):
    pk = [col['name'] for col in cols if 'PRIMARY KEY' in col.get('constraints',[])]
    if pk:
        return f'    PRIMARY KEY ({", ".join(pk)})'
    return None

def render_unique_constraints(uniqs):
    lines = []
    for uniq in uniqs or []:
        line = f'    UNIQUE ({", ".join(uniq)})'
        lines.append(line)
    return '\n'.join(lines)

def render_foreign_keys(fks):
    lines = []
    for fk in fks or []:
        cols = fk['columns']
        ref = fk['references']
        lines.append(f'    FOREIGN KEY ({", ".join(cols)}) REFERENCES {ref}')
    return '\n'.join(lines)

def render_table(tbl):
    sql = f"-- Table: {tbl['name']}\nCREATE TABLE IF NOT EXISTS {tbl['name']} (\n"
    lines = []

    cols = tbl['columns']
    # columns
    lines.append(render_columns(cols))

    # primary key
    pk_sql = render_primary_key(cols)
    if pk_sql:
        lines.append(pk_sql)
    # unique constraints
    if tbl.get('unique_constraints'):
        lines.append(render_unique_constraints(tbl['unique_constraints']))
    # foreign keys
    if tbl.get('foreign_keys'):
        lines.append(render_foreign_keys(tbl['foreign_keys']))

    sql += ',\n'.join(lines) + '\n);\n\n'
    return sql

def render_seeds(tbl):
    out = []
    for seed in tbl.get('seed', []):
        out.append(str(seed).strip() + '\n')
    return '\n'.join(out)

def main():
    tables = load_tables_config()
    out = "-- Auto-generated by generate_schema.py\n\n"
    for tbl in tables:
        out += render_table(tbl)
        if tbl.get('unique_constraints'):
            for uniq in tbl['unique_constraints']:
                keyname = f"{tbl['name']}_{'_'.join(uniq)}_key"
                out += f"ALTER TABLE {tbl['name']} ADD CONSTRAINT {keyname} UNIQUE ({', '.join(uniq)});\n"
        if tbl.get('seed'):
            out += render_seeds(tbl)
        out += "\n"
    # Output
    with open(OUTPUT_FILE, 'w') as f:
        f.write(out)
    print(f"Schema generated: {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
