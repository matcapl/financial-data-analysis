#!/usr/bin/env python3
"""
scripts/generate_schema.py

Generate schema/001_financial_schema.sql by combining:
 1. financial_metrics & line_item_definitions from config/fields.yaml
 2. Other tables from config/tables.yaml
"""
import yaml
from pathlib import Path

BASE        = Path(__file__).parent.parent
FIELDS_YAML = BASE / "config" / "fields.yaml"
TABLES_YAML = BASE / "config" / "tables.yaml"
OUT_SQL     = BASE / "schema" / "001_financial_schema.sql"

def render_fields_tables(fields_cfg):
    out = ["-- Auto-generated by generate_schema.py\n"]

    # financial_metrics
    cols = [
      "company_id",
      "period_id",          # for joining to periods
      "line_item_id",       # for joining to line items
      "company_name",
      "line_item",
      "period_label",
      "period_type",
      "start_date",
      "end_date",
      "value",
      "value_type",
      "frequency",
      "currency",
      "source_file",
      "source_page",
      "source_type",
      "notes",
      "statement_type",
      "category"
    ]
    out.append("-- Table: financial_metrics")
    out.append("CREATE TABLE IF NOT EXISTS financial_metrics (")
    defs = []
    for c in cols:
        if c == "period_id" or c == "line_item_id":
            defs.append("  period_id INT NOT NULL,")
        else:
            defs.append(f"  {c} {fields_cfg['fields'][c]['sql_type']},")
    defs.append("  PRIMARY KEY (company_id, line_item, period_label)")
    out.append("\n".join(defs))
    out.append(");\n")

    # line_item_definitions
    out.append("-- Table: line_item_definitions")
    out.append("CREATE TABLE IF NOT EXISTS line_item_definitions (")
    out.append("  id INT PRIMARY KEY,")
    out.append("  name TEXT NOT NULL,")
    out.append("  aliases TEXT[],")
    out.append("  description TEXT")
    out.append(");\n")

    # seed line_item_definitions
    out.append("-- Seed line_item_definitions")
    out.append("INSERT INTO line_item_definitions (id, name, aliases, description) VALUES")
    vals = []
    for li in fields_cfg["line_items"]:
        iid = li["id"]
        name = li["name"].replace("'", "''")
        aliases = "{" + ",".join(a.replace("'", "''") for a in li["aliases"]) + "}"
        desc = li["description"].replace("'", "''")
        vals.append(f"  ({iid}, '{name}', '{aliases}'::TEXT[], '{desc}')")
    out.append(",\n".join(vals) + "\nON CONFLICT (id) DO NOTHING;\n")
    return out

def render_other_tables(tables_cfg):
    out = []
    for tbl in tables_cfg:
        if tbl.get("from_fields"):
            continue
        name = tbl["name"]
        out.append(f"-- Table: {name}")
        out.append(f"CREATE TABLE IF NOT EXISTS {name} (")
        col_lines = []
        for col in tbl.get("columns", []):
            line = f"  {col['name']} {col['type']}"
            if col.get("not_null"):
                line += " NOT NULL"
            if "default" in col:
                line += f" DEFAULT {col['default']}"
            for c in col.get("constraints", []):
                line += f" {c}"
            for chk in col.get("checks", []):
                line += f" CHECK ({chk})"
            col_lines.append(line)
        out.append(",\n".join(col_lines))
        out.append(");\n")
        for uc in tbl.get("unique_constraints", []):
            cols = ", ".join(uc)
            out.append(f"ALTER TABLE {name} ADD CONSTRAINT {name}_{'_'.join(uc)}_key UNIQUE ({cols});")
        for idx in tbl.get("indexes", []):
            cols = ", ".join(idx)
            out.append(f"CREATE INDEX IF NOT EXISTS idx_{name}_{'_'.join(idx)} ON {name}({cols});")
        for seed in tbl.get("seed", []):
            out.append(seed.strip() + "\n")
    return out

def main():
    fields_cfg = yaml.safe_load(FIELDS_YAML.read_text())
    tables_cfg = yaml.safe_load(TABLES_YAML.read_text())["tables"]

    sql_lines = []
    # Core analytics tables first
    sql_lines += render_fields_tables(fields_cfg)
    # Other system/reporting tables
    sql_lines += render_other_tables(tables_cfg)

    OUT_SQL.write_text("\n".join(sql_lines))
    print(f"Wrote {OUT_SQL}")

if __name__ == "__main__":
    main()
