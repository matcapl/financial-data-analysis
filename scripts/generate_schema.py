import yaml
import os

TABLES_YAML = "config/tables.yaml"
OUTPUT_FILE = "schema/001_financial_schema.sql"

def load_tables_config(path=TABLES_YAML):
    with open(path, "r") as f:
        cfg = yaml.safe_load(f)
    return cfg["tables"]

def column_clause(col):
    out = f"{col['name']} {col['type']}"
    if "default" in col:
        out += f" DEFAULT {col['default']}"
    # Only include NOT NULL and PRIMARY KEY at the column level if present
    for constraint in col.get("constraints", []):
        if constraint in ("NOT NULL", "PRIMARY KEY"):
            out += f" {constraint}"
    return out

def table_pk_constraint(cols):
    # Use table-level PK constraint only if no column-level PKs present
    pk_cols = []
    for col in cols:
        if "PRIMARY KEY" in (col.get("constraints") or []):
            return None
        if col.get("is_pk", False):
            pk_cols.append(col["name"])
    # No inlined PKs, check for legacy is_pk flag or skip
    if pk_cols:
        return f"PRIMARY KEY ({', '.join(pk_cols)})"
    return None

def unique_constraints(constraints):
    lines = []
    for uniq in constraints or []:
        cols = ", ".join(uniq)
        lines.append(f"UNIQUE ({cols})")
    return lines

def fk_constraints(constraints):
    lines = []
    for fk in constraints or []:
        cols = ", ".join(fk["columns"])
        lines.append(f"FOREIGN KEY ({cols}) REFERENCES {fk['references']}")
    return lines

def render_table(tbl):
    cols = tbl["columns"]

    # Build column definitions first
    col_defs = [column_clause(col) for col in cols]

    # Collect table-level constraints
    constraints = []

    # Composite or table-only PK
    pk_table = table_pk_constraint(cols)
    if pk_table:
        constraints.append(pk_table)

    # Unique constraints
    if tbl.get("unique_constraints"):
        constraints.extend(unique_constraints(tbl["unique_constraints"]))

    # Foreign key constraints
    if tbl.get("foreign_keys"):
        constraints.extend(fk_constraints(tbl["foreign_keys"]))

    # Inline columns and constraints, comma separated, correctly
    all_defs = col_defs + constraints
    sql = f"-- Table: {tbl['name']}\nCREATE TABLE IF NOT EXISTS {tbl['name']} (\n  "
    sql += ",\n  ".join(all_defs)
    sql += "\n);\n\n"
    return sql

def render_seeds(tbl):
    out = []
    for seed in tbl.get("seed", []):
        out.append(str(seed).strip() + "\n")
    return "\n".join(out)

def main():
    tables = load_tables_config()
    out = "-- Auto-generated by generate_schema.py\n\n"
    for tbl in tables:
        out += render_table(tbl)
        if tbl.get("seed"):
            out += render_seeds(tbl)
        out += "\n"
    with open(OUTPUT_FILE, "w") as f:
        f.write(out)
    print(f"Schema generated: {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
