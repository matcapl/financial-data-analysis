import yaml
import os

TABLES_YAML = "config/tables.yaml"
OUTPUT_FILE = "schema/001_financial_schema.sql"


def load_tables_config(path=TABLES_YAML):
    with open(path, "r") as f:
        cfg = yaml.safe_load(f)
    return cfg["tables"]


def column_clause(col):
    out = f"{col['name']} {col['type']}"
    if "default" in col:
        out += f" DEFAULT {col['default']}"
    for constraint in col.get("constraints", []):
        if constraint in ("NOT NULL", "PRIMARY KEY"):
            out += f" {constraint}"
    return out


def table_pk_constraint(cols):
    pk_cols = [col["name"] for col in cols if col.get("is_pk", False)]
    if pk_cols:
        return f"PRIMARY KEY ({', '.join(pk_cols)})"
    # legacy column-level PKs handled inline
    return None


def unique_constraints(constraints):
    lines = []
    for uniq in constraints or []:
        cols = ", ".join(uniq)
        lines.append(f"UNIQUE ({cols})")
    return lines


def fk_constraints(constraints):
    lines = []
    for fk in constraints or []:
        cols = ", ".join(fk["columns"])
        lines.append(f"FOREIGN KEY ({cols}) REFERENCES {fk['references']}")
    return lines


def index_statements(tbl):
    stmts = []
    for idx in tbl.get("indexes", []):
        cols = ", ".join(idx["columns"])
        idx_name = f"idx_{tbl['name']}_{'_'.join(idx['columns'])}"
        if idx.get("unique", False):
            stmts.append(
                f"CREATE UNIQUE INDEX IF NOT EXISTS {idx_name} "
                f"ON {tbl['name']} ({cols});"
            )
        else:
            stmts.append(
                f"CREATE INDEX IF NOT EXISTS {idx_name} "
                f"ON {tbl['name']} ({cols});"
            )
    return stmts


def render_table(tbl):
    cols = tbl["columns"]
    col_defs = [column_clause(col) for col in cols]

    constraints = []
    pk_table = table_pk_constraint(cols)
    if pk_table:
        constraints.append(pk_table)
    if tbl.get("unique_constraints"):
        constraints.extend(unique_constraints(tbl["unique_constraints"]))
    if tbl.get("foreign_keys"):
        constraints.extend(fk_constraints(tbl["foreign_keys"]))

    all_defs = col_defs + constraints
    sql = f"-- Table: {tbl['name']}\n"
    sql += f"CREATE TABLE IF NOT EXISTS {tbl['name']} (\n  "
    sql += ",\n  ".join(all_defs)
    sql += "\n);\n\n"
    return sql


def render_seeds(tbl):
    out = []
    for seed in tbl.get("seed", []):
        if isinstance(seed, dict) and "sql" in seed:
            out.append(seed["sql"].rstrip() + "\n")
        else:
            out.append(str(seed).rstrip() + "\n")
    return "\n".join(out)


def main():
    tables = load_tables_config()
    out_lines = ["-- Auto-generated by generate_schema.py\n"]
    for tbl in tables:
        out_lines.append(render_table(tbl))
        # add seed data
        if tbl.get("seed"):
            out_lines.append(render_seeds(tbl))
        # add index statements
        for stmt in index_statements(tbl):
            out_lines.append(stmt + "\n")
        out_lines.append("\n")
    os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)
    with open(OUTPUT_FILE, "w") as f:
        f.write("".join(out_lines))
    print(f"Schema generated: {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
