#!/usr/bin/env python3
"""
scripts/generate_questions.py

Generate schema/002_question_templates.sql from config/questions.yaml,
including a DROP TABLE to replace any existing definition.
"""
import yaml
from pathlib import Path

BASE       = Path(__file__).parent.parent
QUEST_YAML = BASE / "config" / "questions.yaml"
OUT_SQL    = BASE / "schema" / "002_question_templates.sql"

def main():
    questions = yaml.safe_load(QUEST_YAML.read_text())["questions"]

    lines = ["-- Auto-generated by generate_questions.py\n"]
    # Drop existing table to avoid conflicts
    lines.append("DROP TABLE IF EXISTS question_templates CASCADE;\n")

    # Create table matching seed columns
    lines.append("CREATE TABLE IF NOT EXISTS question_templates (")
    lines.append("  id INT PRIMARY KEY,")
    lines.append("  observation_id INT NOT NULL,")
    lines.append("  importance INT NOT NULL,")
    lines.append("  template TEXT NOT NULL")
    lines.append(");\n")

    # Seed question_templates
    lines.append("-- Seed question_templates")
    lines.append("INSERT INTO question_templates (id, observation_id, importance, template) VALUES")
    vals = []
    for q in questions:
        qid = q["id"]
        oid = q["observation_id"]
        imp = q["importance"]
        tmpl = q["template"].replace("'", "''")
        vals.append(f"  ({qid}, {oid}, {imp}, '{tmpl}')")
    lines.append(",\n".join(vals) + "\nON CONFLICT (id) DO NOTHING;\n")

    OUT_SQL.write_text("\n".join(lines))
    print(f"Wrote {OUT_SQL}")

if __name__ == "__main__":
    main()
