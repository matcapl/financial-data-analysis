#!/usr/bin/env python3
"""
scripts/generate_questions.py - Enhanced for board-level questions

Generates schema/002_question_templates.sql from config/questions.yaml
Now supports:
- Board-level question templates with full metadata
- Global configuration storage
- Enhanced template structure
- Integration with materiality thresholds
"""
import yaml
import json
from pathlib import Path

BASE = Path(__file__).parent.parent
QUEST_YAML = BASE / "config" / "questions.yaml"
OUT_SQL = BASE / "schema" / "002_question_templates.sql"

def generate_board_question_templates():
    """Generate enhanced question templates SQL from YAML config"""
    
    try:
        config = yaml.safe_load(QUEST_YAML.read_text())
    except FileNotFoundError:
        print(f"Warning: {QUEST_YAML} not found, generating minimal structure")
        return generate_minimal_templates()
    
    questions = config.get("questions", [])
    global_config = config.get("global_config", {})
    metadata = config.get("metadata", {})
    
    lines = [
        "-- Auto-generated by generate_questions.py",
        f"-- Generated from: {QUEST_YAML}",
        f"-- Version: {metadata.get('version', 'unknown')}",
        f"-- Description: {metadata.get('description', 'Question templates')}",
        ""
    ]
    
    # Drop and recreate question_templates table
    lines.extend([
        "-- Drop existing table to avoid conflicts",
        "DROP TABLE IF EXISTS question_templates CASCADE;",
        "",
        "-- Create enhanced question_templates table",
        "CREATE TABLE question_templates (",
        "    id INT PRIMARY KEY,",
        "    category TEXT NOT NULL,",
        "    template_key TEXT NOT NULL,", 
        "    priority TEXT NOT NULL,",
        "    template_text TEXT NOT NULL,",
        "    condition_formula TEXT,",
        "    materiality_threshold NUMERIC,",
        "    follow_up_questions JSONB DEFAULT '[]'::jsonb,",
        "    context_variables JSONB DEFAULT '{}'::jsonb,",
        "    target_audience TEXT DEFAULT 'board',",
        "    created_at TIMESTAMP DEFAULT NOW() NOT NULL,",
        "    updated_at TIMESTAMP DEFAULT NOW() NOT NULL,",
        "    UNIQUE (category, template_key)",
        ");",
        ""
    ])
    
    # Insert board question templates
    if questions:
        lines.extend([
            "-- Seed board-level question templates",
            "INSERT INTO question_templates (",
            "    id, category, template_key, priority, template_text,",
            "    condition_formula, materiality_threshold, follow_up_questions,",
            "    context_variables, target_audience",
            ") VALUES"
        ])
        
        template_values = []
        for q in questions:
            qid = q["id"]
            category = q["category"]
            template_key = q["template_key"] 
            priority = q["priority"]
            template_text = q["template_text"].replace("'", "''")
            condition_formula = q.get("condition_formula", "").replace("'", "''")
            materiality_threshold = q.get("materiality_threshold", 0.0)
            
            # Handle JSONB fields
            follow_ups = json.dumps(q.get("follow_up_questions", []))
            context_vars = json.dumps(q.get("context_variables", {}))
            target_audience = q.get("target_audience", "board")
            
            template_values.append(
                f"    ({qid}, '{category}', '{template_key}', '{priority}', '{template_text}', "
                f"'{condition_formula}', {materiality_threshold}, '{follow_ups}'::jsonb, "
                f"'{context_vars}'::jsonb, '{target_audience}')"
            )
        
        lines.append(",\n".join(template_values))
        lines.extend([
            "ON CONFLICT (id) DO UPDATE SET",
            "    category = EXCLUDED.category,",
            "    template_key = EXCLUDED.template_key,", 
            "    priority = EXCLUDED.priority,",
            "    template_text = EXCLUDED.template_text,",
            "    condition_formula = EXCLUDED.condition_formula,",
            "    materiality_threshold = EXCLUDED.materiality_threshold,",
            "    follow_up_questions = EXCLUDED.follow_up_questions,",
            "    context_variables = EXCLUDED.context_variables,",
            "    updated_at = NOW();",
            ""
        ])
    
    # Create board_question_config table if not exists (may be in tables.yaml)
    lines.extend([
        "-- Create board configuration table if not exists",
        "CREATE TABLE IF NOT EXISTS board_question_config (",
        "    id SERIAL PRIMARY KEY,",
        "    config_key TEXT NOT NULL UNIQUE,",
        "    config_value JSONB NOT NULL,",
        "    description TEXT,",
        "    updated_by TEXT,",
        "    created_at TIMESTAMP DEFAULT NOW() NOT NULL,",
        "    updated_at TIMESTAMP DEFAULT NOW() NOT NULL",
        ");",
        ""
    ])
    
    # Insert global configuration
    if global_config:
        lines.extend([
            "-- Seed global configuration",
            "INSERT INTO board_question_config (config_key, config_value, description) VALUES"
        ])
        
        config_values = []
        
        # Materiality thresholds
        if "materiality_thresholds" in global_config:
            thresholds_json = json.dumps(global_config["materiality_thresholds"])
            config_values.append(
                f"    ('materiality_thresholds', '{thresholds_json}'::jsonb, 'Materiality thresholds for question generation')"
            )
        
        # Priority weights
        if "priority_weights" in global_config:
            weights_json = json.dumps(global_config["priority_weights"])
            config_values.append(
                f"    ('priority_weights', '{weights_json}'::jsonb, 'Priority weighting system')"
            )
        
        # Selection rules
        if "selection_rules" in global_config:
            rules_json = json.dumps(global_config["selection_rules"])
            config_values.append(
                f"    ('selection_rules', '{rules_json}'::jsonb, 'Question selection and filtering rules')"
            )
        
        if config_values:
            lines.append(",\n".join(config_values))
            lines.extend([
                "ON CONFLICT (config_key) DO UPDATE SET",
                "    config_value = EXCLUDED.config_value,",
                "    description = EXCLUDED.description,",
                "    updated_at = NOW();",
                ""
            ])
    
    # Add helpful indexes
    lines.extend([
        "-- Create indexes for performance",
        "CREATE INDEX IF NOT EXISTS idx_question_templates_category ON question_templates(category);",
        "CREATE INDEX IF NOT EXISTS idx_question_templates_priority ON question_templates(priority);",
        "CREATE INDEX IF NOT EXISTS idx_question_templates_threshold ON question_templates(materiality_threshold);",
        ""
    ])
    
    # Add summary comment
    template_count = len(questions)
    categories = list(set(q.get("category", "unknown") for q in questions))
    
    lines.extend([
        f"-- Summary: Generated {template_count} board-level question templates",
        f"-- Categories: {', '.join(sorted(categories))}",
        f"-- Global config sections: {', '.join(global_config.keys()) if global_config else 'none'}",
    ])
    
    return "\n".join(lines)

def generate_minimal_templates():
    """Generate minimal question templates if YAML config missing"""
    
    return """-- Auto-generated by generate_questions.py (minimal fallback)

-- Drop existing table to avoid conflicts
DROP TABLE IF EXISTS question_templates CASCADE;

-- Create minimal question_templates table
CREATE TABLE question_templates (
    id SERIAL PRIMARY KEY,
    category TEXT DEFAULT 'general',
    template_key TEXT DEFAULT 'basic',
    priority TEXT DEFAULT 'medium',
    template_text TEXT NOT NULL,
    condition_formula TEXT,
    materiality_threshold NUMERIC DEFAULT 10.0,
    follow_up_questions JSONB DEFAULT '[]'::jsonb,
    context_variables JSONB DEFAULT '{}'::jsonb,
    target_audience TEXT DEFAULT 'board',
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Insert basic fallback template
INSERT INTO question_templates (
    id, category, template_key, priority, template_text, condition_formula
) VALUES (
    1, 'general', 'basic_change', 'medium', 
    '{metric} changed by {change_pct:.1f}%. What factors contributed to this change?',
    'abs(change_pct) > 5.0'
) ON CONFLICT (id) DO NOTHING;

-- Summary: Generated minimal question templates (YAML config not found)
"""

def main():
    """Main function to generate question templates SQL"""
    
    try:
        sql_content = generate_board_question_templates()
        
        # Ensure schema directory exists
        OUT_SQL.parent.mkdir(exist_ok=True)
        
        # Write SQL file
        OUT_SQL.write_text(sql_content)
        
        print(f"‚úÖ Generated board-level question templates: {OUT_SQL}")
        
        # Print summary
        if QUEST_YAML.exists():
            config = yaml.safe_load(QUEST_YAML.read_text())
            questions = config.get("questions", [])
            print(f"   üìä Templates: {len(questions)}")
            
            categories = {}
            for q in questions:
                cat = q.get("category", "unknown")
                categories[cat] = categories.get(cat, 0) + 1
            
            print("   üìÇ Categories:")
            for cat, count in sorted(categories.items()):
                print(f"      - {cat}: {count} templates")
                
            global_config = config.get("global_config", {})
            if global_config:
                print(f"   ‚öôÔ∏è  Global config: {', '.join(global_config.keys())}")
        else:
            print("   ‚ö†Ô∏è  Used minimal fallback (YAML config not found)")
            
    except Exception as e:
        print(f"‚ùå Error generating question templates: {e}")
        raise

if __name__ == "__main__":
    main()