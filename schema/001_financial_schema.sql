-- Auto-generated by generate_schema.py

-- Table: companies
CREATE TABLE IF NOT EXISTS companies (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  industry TEXT,
  created_at TIMESTAMP DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP DEFAULT NOW() NOT NULL,
  UNIQUE (name)
);

INSERT INTO companies (name, industry)
VALUES ('Example Company', 'Example Industry')
ON CONFLICT (name) DO NOTHING;

-- Table: periods
CREATE TABLE IF NOT EXISTS periods (
  id SERIAL PRIMARY KEY,
  period_type TEXT NOT NULL,
  period_label TEXT NOT NULL,
  start_date DATE,
  end_date DATE,
  created_at TIMESTAMP DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP DEFAULT NOW() NOT NULL,
  UNIQUE (period_label, period_type)
);

WITH
  today AS (
    SELECT date_trunc('month', now())::date AS current_month
  ),
  boundaries AS (
    SELECT
      (current_month - INTERVAL '20 years')::date AS start_month,
      current_month AS end_month
    FROM today
  ),
  monthly AS (
    SELECT
      to_char(m, 'YYYY-MM') AS period_label,                    -- ✅ ISO FORMAT: 2025-02
      'Monthly' AS period_type,
      m AS start_date,
      (m + INTERVAL '1 month' - INTERVAL '1 day')::date AS end_date
    FROM boundaries,
    generate_series(boundaries.start_month,
                    boundaries.end_month,
                    INTERVAL '1 month') AS m
  ),
  quarterly AS (
    SELECT
      to_char(q, 'YYYY') || '-Q' || to_char(q, 'Q') AS period_label,  -- ✅ ISO FORMAT: 2025-Q1
      'Quarterly' AS period_type,
      q AS start_date,
      (q + INTERVAL '3 months' - INTERVAL '1 day')::date AS end_date
    FROM boundaries,
    generate_series(boundaries.start_month,
                    boundaries.end_month,
                    INTERVAL '3 months') AS q
  ),
  yearly AS (
    SELECT
      to_char(y, 'YYYY') AS period_label,                      -- ✅ ALREADY ISO: 2025
      'Yearly' AS period_type,
      y AS start_date,
      (y + INTERVAL '1 year' - INTERVAL '1 day')::date AS end_date
    FROM boundaries,
    generate_series(date_trunc('year', boundaries.start_month),
                    date_trunc('year', boundaries.end_month),
                    INTERVAL '1 year') AS y
  ),
  all_p AS (
    SELECT * FROM monthly
    UNION
    SELECT * FROM quarterly
    UNION
    SELECT * FROM yearly
  )  -- ✅ FIXED: Added missing closing parenthesis
INSERT INTO periods (period_label, period_type, start_date, end_date, created_at, updated_at)
SELECT period_label, period_type, start_date, end_date, now(), now()
FROM all_p
ON CONFLICT (period_label, period_type) DO NOTHING;

-- Table: line_item_definitions
CREATE TABLE IF NOT EXISTS line_item_definitions (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  aliases TEXT[],
  description TEXT,
  UNIQUE (name)
);

INSERT INTO line_item_definitions (name, aliases, description) VALUES
  ('Revenue', '{sales,income,turnover,total_revenue,rev}'::TEXT[], 'Total revenue from operations'),
  ('Gross Profit', '{gross_profit,grossincome,gross income}'::TEXT[], 'Revenue minus cost of goods sold'),
  ('EBITDA', '{earnings_before_interest,earnings_before_taxes,earnings_before_interest_taxes,operating_profit}'::TEXT[], 'Earnings before interest, taxes, depreciation, amortization')
ON CONFLICT (name) DO NOTHING;

-- Table: financial_metrics
CREATE TABLE IF NOT EXISTS financial_metrics (
  id SERIAL PRIMARY KEY,
  company_id INT NOT NULL,
  period_id INT NOT NULL,
  line_item_id INT NOT NULL,
  value NUMERIC,
  value_type TEXT,
  frequency TEXT,
  currency TEXT,
  source_file TEXT,
  source_page INT,
  source_type TEXT,
  notes TEXT,
  hash TEXT,
  created_at TIMESTAMP DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP DEFAULT NOW() NOT NULL,
  UNIQUE (company_id, period_id, line_item_id),
  FOREIGN KEY (company_id) REFERENCES companies(id),
  FOREIGN KEY (period_id) REFERENCES periods(id),
  FOREIGN KEY (line_item_id) REFERENCES line_item_definitions(id)
);


-- Table: derived_metrics
CREATE TABLE IF NOT EXISTS derived_metrics (
  id SERIAL PRIMARY KEY,
  base_metric_id INT NOT NULL,
  calculation_type TEXT,
  company_id INT NOT NULL,
  period_id INT NOT NULL,
  calculated_value NUMERIC,
  unit TEXT,
  source_ids INT[],
  calculation_note TEXT,
  corroboration_status TEXT,
  frequency TEXT,
  created_at TIMESTAMP DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP DEFAULT NOW() NOT NULL,
  UNIQUE (base_metric_id, company_id, period_id, calculation_type),
  FOREIGN KEY (base_metric_id) REFERENCES financial_metrics(id),
  FOREIGN KEY (company_id) REFERENCES companies(id),
  FOREIGN KEY (period_id) REFERENCES periods(id)
);


-- Table: question_templates
CREATE TABLE IF NOT EXISTS question_templates (
  id SERIAL PRIMARY KEY,
  line_item_id INT,
  template TEXT,
  FOREIGN KEY (line_item_id) REFERENCES line_item_definitions(id)
);


-- Table: questions
CREATE TABLE IF NOT EXISTS questions (
  id SERIAL PRIMARY KEY,
  company_id INT,
  period_id INT,
  line_item_id INT,
  question_template_id INT,
  generated_at TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY (company_id) REFERENCES companies(id),
  FOREIGN KEY (period_id) REFERENCES periods(id),
  FOREIGN KEY (line_item_id) REFERENCES line_item_definitions(id),
  FOREIGN KEY (question_template_id) REFERENCES question_templates(id)
);


-- Table: live_questions
CREATE TABLE IF NOT EXISTS live_questions (
  id SERIAL PRIMARY KEY,
  derived_metric_id INT,
  status TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY (derived_metric_id) REFERENCES derived_metrics(id)
);


-- Table: question_logs
CREATE TABLE IF NOT EXISTS question_logs (
  id SERIAL PRIMARY KEY,
  live_question_id INT,
  changed_on TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY (live_question_id) REFERENCES live_questions(id)
);


-- Table: generated_reports
CREATE TABLE IF NOT EXISTS generated_reports (
  id SERIAL PRIMARY KEY,
  generated_on TIMESTAMP DEFAULT NOW(),
  company_id INT,
  filter_type TEXT,
  report_file_path TEXT,
  FOREIGN KEY (company_id) REFERENCES companies(id)
);


