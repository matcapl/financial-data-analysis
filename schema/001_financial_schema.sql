-- Auto-generated by generate_schema.py

-- Table: financial_metrics
CREATE TABLE IF NOT EXISTS financial_metrics (
  company_id INT,
  period_id INT NOT NULL,
  period_id INT NOT NULL,
  company_name TEXT,
  line_item TEXT,
  period_label TEXT,
  period_type TEXT,
  start_date DATE,
  end_date DATE,
  value NUMERIC,
  value_type TEXT,
  frequency TEXT,
  currency TEXT,
  source_file TEXT,
  source_page INT,
  source_type TEXT,
  notes TEXT,
  statement_type TEXT,
  category TEXT,
  PRIMARY KEY (company_id, line_item, period_label)
);

-- Table: line_item_definitions
CREATE TABLE IF NOT EXISTS line_item_definitions (
  id INT PRIMARY KEY,
  name TEXT NOT NULL,
  aliases TEXT[],
  description TEXT
);

-- Seed line_item_definitions
INSERT INTO line_item_definitions (id, name, aliases, description) VALUES
  (11001, 'Revenue', '{sales,income,turnover,total_revenue,rev}'::TEXT[], 'Total revenue from operations'),
  (11002, 'Gross Profit', '{gross_profit,grossincome,gross income}'::TEXT[], 'Revenue minus cost of goods sold'),
  (11003, 'EBITDA', '{earnings_before_interest,earnings_before_taxes,earnings_before_interest_taxes,operating_profit}'::TEXT[], 'Earnings before interest, taxes, depreciation, amortization')
ON CONFLICT (id) DO NOTHING;

-- Table: companies
CREATE TABLE IF NOT EXISTS companies (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  industry TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

ALTER TABLE companies ADD CONSTRAINT companies_name_key UNIQUE (name);
INSERT INTO companies (id, name, industry)
VALUES (1, 'Wilson Group', 'Technology')
ON CONFLICT (name) DO UPDATE
  SET industry = EXCLUDED.industry,
      updated_at = NOW();

SELECT setval(
  pg_get_serial_sequence('companies','id'),
  GREATEST(1, (SELECT COALESCE(MAX(id), 0) FROM companies))
);

-- Table: periods
CREATE TABLE IF NOT EXISTS periods (
  id SERIAL PRIMARY KEY,
  period_type TEXT NOT NULL,
  period_label TEXT NOT NULL,
  start_date DATE,
  end_date DATE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Table: derived_metrics
CREATE TABLE IF NOT EXISTS derived_metrics (
  id SERIAL PRIMARY KEY,
  base_metric_id INT NOT NULL,
  calculation_type TEXT,
  frequency TEXT,
  company_id INT NOT NULL,
  period_id INT NOT NULL,
  calculated_value NUMERIC,
  unit TEXT,
  source_ids TEXT,
  calculation_note TEXT,
  corroboration_status TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_derived_metrics_base_metric_id ON derived_metrics(base_metric_id);
CREATE INDEX IF NOT EXISTS idx_derived_metrics_company_id_period_id ON derived_metrics(company_id, period_id);
-- Table: question_templates
CREATE TABLE IF NOT EXISTS question_templates (
  id SERIAL PRIMARY KEY,
  metric TEXT NOT NULL,
  calculation_type TEXT NOT NULL,
  base_question TEXT NOT NULL,
  trigger_threshold NUMERIC NOT NULL,
  trigger_operator TEXT NOT NULL CHECK (trigger_operator IN ('>','<','>=','<=','=')),
  default_weight NUMERIC(5,2) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Table: live_questions
CREATE TABLE IF NOT EXISTS live_questions (
  id SERIAL PRIMARY KEY,
  derived_metric_id INT NOT NULL,
  template_id INT NOT NULL,
  question_text TEXT,
  category TEXT,
  composite_score NUMERIC,
  scorecard TEXT,
  status TEXT,
  owner TEXT,
  deadline DATE,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_live_questions_status ON live_questions(status);
CREATE INDEX IF NOT EXISTS idx_live_questions_composite_score ON live_questions(composite_score);
-- Table: question_logs
CREATE TABLE IF NOT EXISTS question_logs (
  id SERIAL PRIMARY KEY,
  live_question_id INT NOT NULL,
  change_type TEXT,
  changed_by TEXT,
  old_value TEXT,
  new_value TEXT,
  change_note TEXT,
  changed_on TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Table: generated_reports
CREATE TABLE IF NOT EXISTS generated_reports (
  id SERIAL PRIMARY KEY,
  generated_on TIMESTAMP NOT NULL DEFAULT NOW(),
  filter_type TEXT,
  parameters JSONB,
  output_summary TEXT,
  report_file_path TEXT,
  company_id INT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
