name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "18"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: financial_data_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: pip install uv
    
    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        uv sync
        # Verify python-multipart is installed
        source .venv/bin/activate
        python -c "import multipart; print('✓ python-multipart is available')"
    
    - name: Set up test environment
      run: |
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/financial_data_test" >> .env
        echo "NODE_ENV=test" >> .env
    
    - name: Run database setup
      run: |
        source .venv/bin/activate
        python scripts/ci_manager.py db setup
    
    - name: Validate configuration
      run: |
        source .venv/bin/activate  
        python scripts/ci_manager.py validate
    
    - name: Run unit tests
      run: |
        source .venv/bin/activate
        python scripts/ci_manager.py test --type unit
    
    - name: Run integration tests
      run: |
        source .venv/bin/activate
        python scripts/ci_manager.py test --type integration
    
    - name: Start server and run API tests
      run: |
        source .venv/bin/activate
        # Start server in background
        python server/main.py &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run health check
        python scripts/ci_manager.py health
        
        # Kill server
        kill $SERVER_PID
  
  build-client:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install client dependencies
      run: |
        cd client
        npm ci
    
    - name: Build client
      run: |
        cd client
        npm run build
    
    - name: Test client build
      run: |
        cd client
        test -d build || exit 1
        test -f build/index.html || exit 1
        echo "✅ Client build successful"

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, build-client]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t financial-data-analysis:latest .
        
    - name: Test Docker image
      run: |
        # Start container
        docker run -d --name test-container \
          -e DATABASE_URL="postgresql://test:test@host.docker.internal:5432/test" \
          -p 4001:4000 \
          financial-data-analysis:latest
        
        # Wait and test
        sleep 10
        
        # Cleanup
        docker stop test-container
        docker rm test-container